{
    // STM32H753ZI Workspace-Specific Settings
    "C_Cpp.default.defines": [
        "STM32H753xx",
        "USE_HAL_DRIVER",
        "ARM_MATH_CM7",
        "HSE_VALUE=25000000",
        "STM32H753ZI",
        "NUCLEO_H753ZI",
        "X_NUCLEO_IHM02A1"
    ],
    "C_Cpp.default.includePath": [
        "${workspaceFolder}/src/**",
        "${workspaceFolder}/src/config",
        "${workspaceFolder}/src/common",
        "${workspaceFolder}/00_reference/**",
        "${workspaceFolder}/00_reference/STM32Cube_FW_H7_V1.12.0/Drivers/STM32H7xx_HAL_Driver/Inc",
        "${workspaceFolder}/00_reference/STM32Cube_FW_H7_V1.12.0/Drivers/CMSIS/Device/ST/STM32H7xx/Include",
        "${workspaceFolder}/00_reference/STM32Cube_FW_H7_V1.12.0/Drivers/CMSIS/Include"
    ],
    "C_Cpp.default.compilerPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin\\arm-none-eabi-gcc.exe",
    "C_Cpp.default.intelliSenseMode": "gcc-arm",
    "C_Cpp.default.cStandard": "c11",
    "C_Cpp.default.cppStandard": "c++17",
    "C_Cpp.workspaceParsingPriority": "high",
    "C_Cpp.enhancedColorization": "enabled",
    "C_Cpp.errorSquiggles": "enabled",
    // Performance optimizations for large workspace
    "C_Cpp.intelliSenseEngine": "default",
    "C_Cpp.intelliSenseEngineFallback": "enabled",
    "C_Cpp.workspaceSymbols": "Just My Code",
    "C_Cpp.exclusionPolicy": "checkFolders",
    "C_Cpp.files.exclude": {
        "00_reference/CMSIS_docs/**": true,
        "00_reference/ST_Assets/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Projects/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Utilities/**": true,
        "**/node_modules": true,
        "**/.git": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true
    },
    "C_Cpp.clang_format_style": "{ BasedOnStyle: LLVM, IndentWidth: 4, TabWidth: 4, UseTab: Never, ColumnLimit: 79, AllowShortFunctionsOnASingleLine: None }",
    "editor.formatOnSave": true,
    // File associations for this workspace
    "files.associations": {
        "*.h": "c",
        "*.c": "c",
        "*.inc": "c"
    },
    // Cortex-Debug configuration for this workspace
    "cortex-debug.openocdPath": "C:\\ST\\STM32CubeCLT_1.18.0\\STLink-gdb-server\\bin\\STLinkGDBServer.exe",
    "cortex-debug.armToolchainPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin",
    "cortex-debug.gdbPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin\\arm-none-eabi-gdb.exe",
    "cortex-debug.registerUseNaturalFormat": false,
    "cortex-debug.variableUseNaturalFormat": false,
    "cortex-debug.showRTOS": true,
    // STM32 extension configuration for this workspace
    "stm32-for-vscode.openOCDPath": "C:\\ST\\STM32CubeCLT_1.18.0\\STLink-gdb-server\\bin\\STLinkGDBServer.exe",
    "stm32-for-vscode.armToolchainPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin",
    // STM32Cube extension configuration
    "stm32cube.cubeMXPath": "C:\\STMicroelectronics\\STM32Cube\\STM32CubeMX\\STM32CubeMX.exe",
    "stm32cube.openocdPath": "C:\\ST\\STM32CubeCLT_1.18.0\\STLink-gdb-server\\bin\\STLinkGDBServer.exe",
    "stm32cube.cubeIDELauncherPath": "",
    "stm32cube.svdPath": "${workspaceFolder}/00_reference/ST_Assets/stm32h7-svd_2.8",
    "stm32cube.targetConfigurations": [
        {
            "name": "STM32H753ZI",
            "device": "STM32H753ZI",
            "board": "NUCLEO-H753ZI",
            "svdFile": "${workspaceFolder}/00_reference/ST_Assets/stm32h7-svd_2.8/STM32H753.svd"
        }
    ],
    // Python configuration for this workspace
    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.terminal.activateEnvInCurrentTerminal": true,
    "python.analysis.extraPaths": [
        "${workspaceFolder}/scripts",
        "${workspaceFolder}/.venv/lib/python3.10/site-packages"
    ],
    "python.envFile": "${workspaceFolder}/.env",
    // Doxygen configuration for this workspace
    "doxygen.generic.commentPrefix": "///",
    "doxygen.file.fileTemplate": "@file {name}\\n@brief STM32H753ZI Project - {cursor}\\n@author STM32H753ZI Project Team\\n@date {date}\\n",
    // Git configuration for this workspace
    "git.repositoryScanMaxDepth": 1,
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    // Performance settings
    "typescript.surveys.enabled": false,
    "extensions.autoCheckUpdates": false,
    "extensions.autoUpdate": false,
    // Terminal configuration for this workspace
    "terminal.integrated.cwd": "${workspaceFolder}",
    "terminal.integrated.env.linux": {
        "VIRTUAL_ENV": "${workspaceFolder}/.venv",
        "PATH": "${workspaceFolder}/.venv/bin:${env:PATH}"
    },
    "terminal.integrated.defaultProfile.linux": "bash",
    "terminal.integrated.profiles.linux": {
        "bash": {
            "path": "/bin/bash",
            "args": [
                "--init-file",
                "${workspaceFolder}/.vscode/bash_profile.sh"
            ],
            "icon": "terminal-bash"
        },
        "PowerShell": {
            "path": "/usr/bin/pwsh",
            "args": [
                "-NoExit",
                "-File",
                "${workspaceFolder}/.vscode/powershell_profile.ps1"
            ],
            "icon": "terminal-powershell"
        },
        "sh": {
            "path": "/bin/sh",
            "args": [],
            "icon": "terminal"
        }
    },
    // Shell integration configuration for command detection
    "terminal.integrated.shellIntegration.enabled": true,
    "terminal.integrated.shellIntegration.showWelcome": false,
    "terminal.integrated.shellIntegration.decorationsEnabled": "both",
    "terminal.integrated.enablePersistentSessions": true,
    "terminal.integrated.persistentSessionReviveProcess": "onExitAndWindowClose",
    // Enhanced command detection settings
    "terminal.integrated.shellIntegration.history": 100,
    "terminal.integrated.commandsToSkipShell": [],
    "terminal.integrated.allowMnemonics": true,
    "terminal.integrated.confirmOnExit": "hasChildProcesses",
    // CMake configuration for this workspace
    "cmake.buildDirectory": "${workspaceFolder}/build",
    "cmake.sourceDirectory": "${workspaceFolder}",
    "cmake.generator": "Ninja",
    "cmake.configureOnOpen": false,
    "cmake.configureOnEdit": false,
    "cmake.defaultVariants": {
        "buildType": {
            "default": "Debug",
            "description": "The build type"
        }
    },
    "cmake.ctestDefaultArgs": [
        "--output-on-failure"
    ],
    "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",
    // Workspace performance optimizations
    "files.exclude": {
        "00_reference/CMSIS_docs/**": true,
        "00_reference/ST_Assets/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Projects/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Utilities/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Middlewares/**": true,
        "**/node_modules": true,
        "**/.git": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true,
        "build/**": true,
        "**/*.o": true,
        "**/*.elf": true,
        "**/*.map": true,
        "**/*.lst": true
    },
    "search.exclude": {
        "00_reference/CMSIS_docs/**": true,
        "00_reference/ST_Assets/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Projects/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Utilities/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Middlewares/**": true,
        "build/**": true,
        "docs/semantic_vector_db/**": true
    },
    "files.watcherExclude": {
        "00_reference/**": true,
        "build/**": true,
        "docs/semantic_vector_db/**": true,
        "**/node_modules/**": true,
        "**/.git/**": true
    },
    // Todo Tree configuration for STM32 project
    "todo-tree.regex.regex": "((//|#|<!--|;|/\\*|^)\\s*($TAGS)|^\\s*- \\[ \\])",
    "todo-tree.general.tags": [
        "TODO",
        "FIXME",
        "BUG",
        "HACK",
        "XXX",
        "NOTE",
        "INFO"
    ],
    "todo-tree.highlights.defaultHighlight": {
        "foreground": "#FFFFFF",
        "background": "#FFA500",
        "icon": "alert",
        "rulerColour": "#FFA500",
        "type": "tag"
    },
    // Code Spell Checker configuration for embedded project
    "cSpell.words": [
        "STM32H753ZI",
        "STM32H753xx",
        "NUCLEO",
        "IHM02A1",
        "L6470",
        "AS5600",
        "HAL",
        "GPIO",
        "SPI",
        "I2C",
        "UART",
        "CAN",
        "FD",
        "DMA",
        "NVIC",
        "RCC",
        "CMSIS",
        "dSPIN",
        "microstepping",
        "stepper",
        "encoder",
        "magnetic",
        "Cortex",
        "OpenOCD",
        "STLink",
        "GDB",
        "SVD",
        "SSOT",
        "watchdog",
        "MCU",
        "PHY",
        "LAN8742",
        "Ethernet",
        "LwIP",
        "FreeRTOS",
        "ITM",
        "SWO",
        // STM32CubeMX and peripheral terms
        "FDCAN",
        "EXTI",
        "LPTIM",
        "LPUART",
        "LTDC",
        "QSPI",
        "SDMMC",
        "SPDIFRX",
        "SWPMI",
        "HRTIM",
        "DFSDM",
        "DFSDMAC",
        "SYSCLK",
        "HCLK",
        "PLLCLK",
        "PLLSOURCE",
        "SYSCLKSOURCE",
        "PLLFRACN",
        "HPRE",
        "PPRE",
        "CPRE",
        "CKPER",
        "DIVM",
        "DIVN",
        "DIVP",
        "DIVQ",
        "DIVR",
        "MEMORYMAP",
        "LQFP",
        "Systick",
        "PRIORITYGROUP",
        "Xplorer",
        "pinconfig",
        "functionlistsort",
        "MSP",
        "BSP",
        // STM32 technical terms
        "DATASIZE",
        "BAUDRATEPRESCALER",
        "FIRSTBIT",
        "TIMODE",
        "CRCCALCULATION",
        "NSSP",
        "INTERDATA",
        "Susp",
        "AUTOSUSP",
        "MOSI",
        "MISO",
        "PULLUP",
        "ANALOGFILTER",
        "CLOCKSOURCE",
        "COUNTERMODE",
        "CLOCKDIVISION",
        "CPHA",
        "CPOL",
        "kbps",
        "Mbps"
    ],
    "cSpell.customDictionaries": {
        "stm32-project-dictionary": {
            "name": "STM32 Project Dictionary",
            "path": "${workspaceFolder}/.vscode/cspell.txt",
            "addWords": true,
            "scope": "workspace"
        }
    },
    "cSpell.ignorePaths": [
        "build/**",
        "00_reference/**",
        "**/*.ioc"
    ],
    "cSpell.enabledFileTypes": {
        "c": true,
        "cpp": true,
        "h": true,
        "hpp": true,
        "cmake": true,
        "markdown": true,
        "yaml": true,
        "json": true
    },
    // Python configuration enhancements (uses pyproject.toml for formatting settings)
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "python.linting.pylintEnabled": true,
    "python.linting.flake8Args": [
        "--config=${workspaceFolder}/.flake8"
    ],
    "python.linting.pylintArgs": [
        "--rcfile=${workspaceFolder}/.pylintrc"
    ],
    "python.formatting.provider": "black",
    // Makefile Tools configuration
    "makefile.extensionOutputFolder": "./.vscode",
    "makefile.configureOnOpen": false,
    // Markdown configuration
    "markdown.extension.toc.updateOnSave": true,
    "markdown.extension.preview.autoShowPreviewToSide": false,
    // CMake path configuration - use STM32CubeCLT CMake on Windows
    "cmake.cmakePath": "C:\\ST\\STM32CubeCLT_1.18.0\\CMake\\bin\\cmake.exe",
    "cmake.configureArgs": [
        "-DCMAKE_TOOLCHAIN_FILE=${workspaceFolder}/cmake/arm-none-eabi-gcc.cmake"
    ],
    "chat.agent.maxRequests": 50,
    "github.copilot.selectedCompletionModel": "claude-sonnet-4",
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "<!-- Use this file to provide workspace-specific custom instructions to Copilot. For more details, visit https://code.visualstudio.com/docs/copilot/copilot-customization#_use-a-githubcopilotinstructionsmd-file -->\r\n\r\n# STM32H753ZI Stepper Motor Control Project - Copilot Instructions\r\n\r\nThis workspace develops firmware for an **STM32H753ZI Nucleo-144** board controlling stepper motors via **X-NUCLEO-IHM02A1** shield with closed-loop feedback using **AS5600 magnetic encoders**.\r\n\r\n## 📋 Current Project Status\r\n**IMPORTANT**: Always check `STATUS.md` in the root directory for the most current project state, including:\r\n- Current development phase and active work items\r\n- Recent completions and next priorities  \r\n- Build status and key metrics\r\n- Technical context and architecture status\r\n- Quick reference commands and file locations\r\n\r\n**🤖 STATUS.md Automation System (Phase 3 Complete)**: The status file is now automatically updated via Git hooks after every commit, with real-time monitoring capabilities and enhanced VS Code integration. No manual maintenance required for basic status tracking.\r\n\r\n**Automation Features:**\r\n- ✅ **Git Hooks**: Post-commit STATUS.md updates with intelligent loop prevention\r\n- ✅ **Real-time Monitoring**: Live build/git status with optimized process management (<1s response)\r\n- ✅ **VS Code Tasks**: Enhanced workflow with manual triggers and preview capabilities\r\n- ✅ **Smart Detection**: Merge commit handling, build context analysis, session continuity tracking\r\n- ✅ **Performance Optimization**: Filesystem-first git checking, strict timeouts, graceful fallbacks\r\n\r\n## X-CUBE-SPN2 + MCSDK Hybrid Integration\r\n\r\nThis project uses a **hybrid approach** combining **X-CUBE-SPN2** (stepper-specific) with **X-CUBE-MCSDK 6.4.1** (selective enhancements):\r\n\r\n### Primary Framework: X-CUBE-SPN2\r\n- **Core Architecture**: X-CUBE-SPN2 stepper motor expansion package\r\n- **Hardware Support**: X-NUCLEO-IHM02A1 shield with dual L6470 drivers\r\n- **Reference Documentation**: `00_reference/x_cube_spn2_markdown_docs` (2.1MB, 197 files)\r\n- **Advantages**: Native stepper support, no algorithm limitations, perfect IHM02A1 integration\r\n\r\n### Enhancement Layer: MCSDK 6.4.1 (Selective)\r\n- **Advanced Algorithms**: Position control, motion profiling, safety systems\r\n- **Development Tools**: Motor Control Workbench, real-time monitoring\r\n- **Enhanced Features**: Dual sensor support, speed overshoot mitigation\r\n- **Integration**: Selective adoption of MCSDK capabilities within SPN2 framework\r\n\r\n### File Organization\r\n- **Primary Code**: `src/spn2/` (X-CUBE-SPN2 components)\r\n- **Enhancement Code**: `src/mcsdk_selective/` (selected MCSDK components)\r\n- **Integration Layer**: `src/drivers/adaptation/` (SPN2-MCSDK bridge)\r\n- **CubeMX Project**: `stm32h753zi_spn2_mcsdk.ioc`\r\n\r\n## Consolidated Instruction System\r\n\r\nThis project uses a **streamlined domain-based instruction system** located in `.github/instructions/` with optimized VS Code Copilot scoping:\r\n\r\n### Domain-Based Instructions (6 Core Files)\r\n- **project-setup.instructions.md**: Workspace setup, build configuration, testing infrastructure, optimization (`**/*.{c,h,md,cmake,txt,json,yml,yaml}`)\r\n- **hardware.instructions.md**: Hardware configuration, GPIO control, memory management, STM32H7 HAL (`src/drivers/**/*.{c,h}`)\r\n- **comms.instructions.md**: Communication protocols, UART/CAN/SPI/I2C interfaces, networking (`src/communication/**/*.{c,h}`)\r\n- **core-software.instructions.md**: Data types, error handling, state management, motor control algorithms (`src/{common,controllers,drivers}/**/*.{c,h}`)\r\n- **safety-rt.instructions.md**: Safety systems, real-time control, timing management, fail-safe mechanisms (`src/{safety,controllers}/**/*.{c,h}`)\r\n- **api-ui.instructions.md**: API design, user interfaces, documentation generation, external integration (`src/{communication,application}/**/*.{c,h}`)\r\n\r\n### Supporting Instructions (7 Files)\r\n- **ssot-config.instructions.md**: Single Source of Truth configuration management principles\r\n- **status-maintenance.instructions.md**: STATUS.md maintenance rules, format requirements, and context preservation (`STATUS.md`)\r\n- **feature-management.instructions.md**: Feature creation, management, and tracking guidelines (`features/feature_registry.json,scripts/feature_tracker.py,docs/FEATURE_TRACKING_SYSTEM.md`)\r\n- **development-workflow.instructions.md**: **CRITICAL** development workflow ensuring feature tracking and STATUS.md integration for Copilot context (`**/*.{c,h,md,json,py,sh,yml,yaml}`)\r\n- **file-organization.instructions.md**: File structure and asset placement guidelines\r\n- **cmake-build-system.instructions.md**: Build system configuration including ARM firmware and host testing compilation (`**/CMakeLists.txt,**/*.cmake,**/CMakePresets.json,.vscode/cmake-kits.json,**/fix_cmake.sh,**/run_host_tests.sh`)\r\n\r\n### MCSDK Integration Documentation\r\n- **docs/MCSDK_INTEGRATION_PLAN.md**: Comprehensive X-CUBE-SPN2 + MCSDK 6.4.1 hybrid integration strategy and CubeMX workflow\r\n\r\n**Key Improvements**: Reduced from 19 instruction files to 13 production-focused files (32% reduction) with archived legacy content. Eliminated redundant RTOS instructions (FreeRTOS complete), merged build system guidance, and added critical development workflow instruction for maintainable, production-ready development guidance with systematic feature tracking integration.\r\n\r\n## Critical Design Principles\r\n\r\n### Single Source of Truth (SSOT)\r\n**CRITICAL**: All configuration must reference centralized SSOT sources:\r\n- Hardware configurations in `src/config/hardware_config.h`\r\n- Communication parameters in `src/config/comm_config.h`\r\n- Motor settings in `src/config/motor_config.h`\r\n- Safety thresholds in `src/config/safety_config.h`\r\n- Build metadata in `src/config/build_config.h`\r\n\r\n### Safety First\r\n**CRITICAL**: Always implement fail-safe behavior:\r\n- Monitor L6470 fault flags continuously\r\n- Implement watchdog timer for fault recovery\r\n- Validate all inputs and sensor readings\r\n- Stop motors immediately on any fault condition\r\n- Use controlled motion profiles to prevent mechanical stress\r\n\r\n## Reference Assets and Documentation System\r\nThe `00_reference/` directory contains comprehensive ST official documentation:\r\n- **STM32H7 HAL Documentation**: 86MB, 3,988 markdown files with complete peripheral coverage\r\n- **X-CUBE-SPN2 L6470 Documentation**: 2.1MB stepper driver specific reference with 197 files\r\n- **STM32H7xx Nucleo BSP Documentation**: 824KB, 42 markdown files with board support package functions\r\n- **CMSIS Documentation**: 49MB, 2,268 HTML files (reference only, not converted)\r\n- **STM32H7 HAL drivers and examples**: Complete implementation examples\r\n- **X-NUCLEO-IHM02A1 board support package**: Shield-specific guidance\r\n- **Application examples and datasheets**: Real-world implementation patterns\r\n\r\n**IMPORTANT**: Never modify `00_reference/` files. Copy needed code to appropriate `src/` locations.\r\n\r\n## Semantic Documentation Search System\r\n**NEW**: Use intelligent semantic search with real AI embeddings for development with **unified STM32H7 + L6470 + Nucleo BSP coverage**:\r\n\r\n```bash\r\n# PRODUCTION SEMANTIC SEARCH (NEW - Preferred)\r\n\r\n# Recommended: Use wrapper script (auto-handles virtual environment)\r\n./scripts/stm32_search.sh concept \"GPIO configuration\" --scope STM32H7\r\n./scripts/stm32_search.sh function \"HAL_GPIO_Init\" --scope STM32H7  \r\n./scripts/stm32_search.sh function \"L6470\" --scope L6470\r\n./scripts/stm32_search.sh peripheral \"SPI\" --scope all\r\n./scripts/stm32_search.sh concept \"stepper motor control\" --scope all\r\n\r\n# Alternative: Direct virtual environment usage\r\n# Use virtual environment for proper dependencies\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"GPIO configuration\" --scope STM32H7\r\n\r\n# Semantic search for specific functions with context understanding\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py function \"HAL_GPIO_Init\" --scope STM32H7\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py function \"L6470\" --scope L6470\r\n\r\n# Find peripheral configurations with semantic understanding\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py peripheral \"SPI\" --scope all\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py peripheral \"UART\" --scope STM32H7\r\n\r\n# Search for register information with context\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py register \"ABS_POS\" --scope L6470\r\n\r\n# Semantic concept discovery across documentation\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"stepper motor control\" --scope all\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"board support package\" --scope NUCLEO_BSP\r\n\r\n# Rebuild semantic database after documentation updates\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"test\" --rebuild\r\n\r\n# LEGACY SEARCH (Archived - Available for reference)\r\n# python3 archive/development_artifacts/legacy_archive/search_enhanced_docs.py [queries...]\r\n\r\n# Validate workspace markdown links\r\npython3 scripts/link_validator.py\r\n```\r\n\r\n**Semantic Search Database (NEW):**\r\n- `docs/semantic_vector_db/` (77,938 documents): ChromaDB with Instructor-XL embeddings across 10 collections\r\n  * `stm32_hal` collection (55,884 documents): STM32H7 HAL, peripheral drivers, reference manuals\r\n  * `project_source` collection (15,868 documents): Project source code, headers, implementation files\r\n  * `build_system` collection (3,006 documents): CMake, build configuration, toolchain setup\r\n  * `motor_control` collection (1,311 documents): X-CUBE-SPN2 L6470 stepper driver documentation\r\n  * `documentation` collection (1,062 documents): Project documentation, reports, design documents\r\n  * `instructions` collection (643 documents): Development instruction files and guidelines\r\n  * `scripts` collection (113 documents): Automation scripts, tools, utilities\r\n  * `validation`, `config`, `apis` collections: Testing, configuration, and API definitions\r\n\r\n**Legacy Search Indexes (Archived):**\r\n- `docs/indexes/STM32H7_FULL_INDEX.json` (8.9MB): Complete STM32H7 searchable index with 31,772 keywords\r\n- `docs/indexes/L6470_SEARCH_INDEX.json` (2.1MB): Complete L6470 documentation index with 356 keywords\r\n- `docs/indexes/STM32H7xx_Nucleo_BSP_INDEX.json` (1MB): Nucleo-144 BSP functions with 74 keywords\r\n- `docs/indexes/STM32H7_COPILOT_INDEX.yaml` (8KB): Copilot-optimized quick reference  \r\n- `docs/indexes/STM32H7_COPILOT_INDEX.json` (9.9KB): Programmatic access format\r\n\r\n**Semantic Search Capabilities (NEW):**\r\n- **AI-Powered Understanding**: Uses Instructor-XL embeddings for context-aware search\r\n- **Intelligent Chunking**: Smart document segmentation with STM32-specific parsing\r\n- **Multi-Collection Search**: Targeted search across STM32H7/L6470/BSP/project domains\r\n- **Scope filtering**: Target specific documentation sets (STM32H7/L6470/NUCLEO_BSP/all)\r\n- **Real embeddings**: 768-dimensional vectors from Instructor-XL model\r\n- **Production ready**: Processes 77,938 documents across 10 collections (1.53GB database)\r\n- **GPU Acceleration**: RTX 4080 SUPER with 100% validation success rate (151.9ms avg response)\r\n\r\n**Migration Notes:**\r\n- **New system**: `scripts/stm32_semantic_search.py` (semantic search with AI embeddings)\r\n- **Legacy system**: `archive/development_artifacts/legacy_archive/search_enhanced_docs.py` (archived keyword search)\r\n- **Performance**: Semantic understanding vs exact keyword matching\r\n- **Requirements**: ChromaDB + requests packages in virtual environment\r\n\r\n**Search Pattern Best Practices:**\r\n- **STM32H7**: Use concept searches (`concept \"GPIO configuration\"`) for broader results\r\n- **L6470**: Use function patterns (`function \"L6470\"`) - driver functions work well semantically  \r\n- **NUCLEO_BSP**: Use exact BSP function names (`function \"BSP_LED_Init\"`) for specific functions\r\n- **Cross-platform**: Use concept searches (`concept \"motor_control\"`) for comprehensive results\r\n- **Scope**: Case-insensitive (`--scope STM32H7`, `--scope nucleo_bsp`, `--scope L6470`)\r\n\r\n**Common Search Patterns:**\r\n```bash\r\n# STM32H7 - Use concept and function searches (semantic understanding)\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"GPIO configuration\" --scope STM32H7\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py function \"HAL_GPIO_Init\" --scope STM32H7\r\n\r\n# L6470 - Use function and concept patterns (semantic context)\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py function \"L6470\" --scope L6470    # ✅ WORKS\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"stepper driver\" --scope L6470\r\n\r\n# Nucleo BSP - Use function names (good semantic matching)\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py function \"BSP_LED_Init\" --scope NUCLEO_BSP  # ✅ WORKS\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"board support\" --scope NUCLEO_BSP\r\n\r\n# Cross-platform concept searches (most effective for complex topics)\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"stepper configuration\" --scope all\r\n/workspaces/code/.venv/bin/python scripts/stm32_semantic_search.py concept \"peripheral setup\" --scope all\r\n```\r\n\r\n## Reference Assets\r\nThe `00_reference/` directory contains ST official assets (READ-ONLY):\r\n- STM32H7 HAL drivers and examples\r\n- X-NUCLEO-IHM02A1 board support package\r\n- L6470 driver libraries and documentation\r\n- Application examples and datasheets\r\n\r\n**IMPORTANT**: Never modify `00_reference/` files. Copy needed code to appropriate `src/` locations.\r\n\r\n## Environment Context\r\nThis workspace runs in a dev container with:\r\n- ARM GCC toolchain, OpenOCD, Doxygen with Graphviz\r\n- Unity/GoogleTest frameworks\r\n- Python tools: CAN, Sphinx, Breathe for docs\r\n- SSOT validation tools: jq, pre-commit hooks\r\n- All development tools for embedded C/C++\r\n\r\n## Reference Material Usage\r\nWhen referencing `00_reference/` assets:\r\n- **Copy** needed header files to `src/` with proper attribution\r\n- **Extract** relevant code snippets with modifications for project needs\r\n- **Document** the source of copied/adapted code in SSOT headers\r\n- **Never** directly include from `00_reference/` in build system\r\n\r\nRemember: **Safety first, SSOT always, modular design throughout.**\r\n"
        }
    ]
}