{
    // STM32H753ZI Workspace-Specific Settings
    "C_Cpp.default.defines": [
        "STM32H753xx",
        "USE_HAL_DRIVER",
        "ARM_MATH_CM7",
        "HSE_VALUE=25000000",
        "STM32H753ZI",
        "NUCLEO_H753ZI",
        "X_NUCLEO_IHM02A1"
    ],
    "C_Cpp.default.includePath": [
        "${workspaceFolder}/src/**",
        "${workspaceFolder}/src/config",
        "${workspaceFolder}/src/common",
        "${workspaceFolder}/00_reference/**",
        "${workspaceFolder}/00_reference/STM32Cube_FW_H7_V1.12.0/Drivers/STM32H7xx_HAL_Driver/Inc",
        "${workspaceFolder}/00_reference/STM32Cube_FW_H7_V1.12.0/Drivers/CMSIS/Device/ST/STM32H7xx/Include",
        "${workspaceFolder}/00_reference/STM32Cube_FW_H7_V1.12.0/Drivers/CMSIS/Include"
    ],
    "C_Cpp.default.compilerPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin\\arm-none-eabi-gcc.exe",
    "C_Cpp.default.intelliSenseMode": "gcc-arm",
    "C_Cpp.default.cStandard": "c11",
    "C_Cpp.default.cppStandard": "c++17",
    "C_Cpp.workspaceParsingPriority": "high",
    "C_Cpp.enhancedColorization": "enabled",
    "C_Cpp.errorSquiggles": "enabled",
    // Performance optimizations for large workspace
    "C_Cpp.intelliSenseEngine": "default",
    "C_Cpp.intelliSenseEngineFallback": "enabled",
    "C_Cpp.workspaceSymbols": "Just My Code",
    "C_Cpp.exclusionPolicy": "checkFolders",
    "C_Cpp.files.exclude": {
        "00_reference/CMSIS_docs/**": true,
        "00_reference/ST_Assets/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Projects/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Utilities/**": true,
        "**/node_modules": true,
        "**/.git": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true
    },
    "C_Cpp.clang_format_style": "{ BasedOnStyle: LLVM, IndentWidth: 4, TabWidth: 4, UseTab: Never, ColumnLimit: 79, AllowShortFunctionsOnASingleLine: None }",
    "editor.formatOnSave": true,
    // File associations for this workspace
    "files.associations": {
        "*.h": "c",
        "*.c": "c",
        "*.inc": "c"
    },
    // Cortex-Debug configuration for this workspace
    "cortex-debug.openocdPath": "C:\\ST\\STM32CubeCLT_1.18.0\\STLink-gdb-server\\bin\\STLinkGDBServer.exe",
    "cortex-debug.armToolchainPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin",
    "cortex-debug.gdbPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin\\arm-none-eabi-gdb.exe",
    "cortex-debug.registerUseNaturalFormat": false,
    "cortex-debug.variableUseNaturalFormat": false,
    "cortex-debug.showRTOS": true,
    // STM32 extension configuration for this workspace
    "stm32-for-vscode.openOCDPath": "C:\\ST\\STM32CubeCLT_1.18.0\\STLink-gdb-server\\bin\\STLinkGDBServer.exe",
    "stm32-for-vscode.armToolchainPath": "C:\\ST\\STM32CubeCLT_1.18.0\\GNU-tools-for-STM32\\bin",
    // STM32Cube extension configuration
    "stm32cube.cubeMXPath": "C:\\STMicroelectronics\\STM32Cube\\STM32CubeMX\\STM32CubeMX.exe",
    "stm32cube.openocdPath": "C:\\ST\\STM32CubeCLT_1.18.0\\STLink-gdb-server\\bin\\STLinkGDBServer.exe",
    "stm32cube.cubeIDELauncherPath": "",
    "stm32cube.svdPath": "${workspaceFolder}/00_reference/ST_Assets/stm32h7-svd_2.8",
    "stm32cube.targetConfigurations": [
        {
            "name": "STM32H753ZI",
            "device": "STM32H753ZI",
            "board": "NUCLEO-H753ZI",
            "svdFile": "${workspaceFolder}/00_reference/ST_Assets/stm32h7-svd_2.8/STM32H753.svd"
        }
    ],
    // Python configuration for this workspace (Cross-platform compatible)
    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.terminal.activateEnvInCurrentTerminal": true,
    "python.analysis.extraPaths": [
        "${workspaceFolder}/scripts",
        "${workspaceFolder}/.venv/lib/python3.10/site-packages",
        "${workspaceFolder}/.venv/Lib/site-packages"
    ],
    "python.envFile": "${workspaceFolder}/.env",
    // Doxygen configuration for this workspace
    "doxygen.generic.commentPrefix": "///",
    "doxygen.file.fileTemplate": "@file {name}\\n@brief STM32H753ZI Project - {cursor}\\n@author STM32H753ZI Project Team\\n@date {date}\\n",
    // Git configuration for this workspace
    "git.repositoryScanMaxDepth": 1,
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    // Performance settings
    "typescript.surveys.enabled": false,
    "extensions.autoCheckUpdates": false,
    "extensions.autoUpdate": false,
    // Terminal configuration for this workspace (Cross-platform compatible)
    "terminal.integrated.cwd": "${workspaceFolder}",
    "terminal.integrated.env.linux": {
        "VIRTUAL_ENV": "${workspaceFolder}/.venv",
        "PATH": "${workspaceFolder}/.venv/bin:${env:PATH}"
    },
    "terminal.integrated.env.windows": {
        "VIRTUAL_ENV": "${workspaceFolder}/.venv",
        "PATH": "${workspaceFolder}/.venv/Scripts;${workspaceFolder}/.venv/bin;${env:PATH}"
    },
    "terminal.integrated.env.osx": {
        "VIRTUAL_ENV": "${workspaceFolder}/.venv",
        "PATH": "${workspaceFolder}/.venv/bin:${env:PATH}"
    },
    "terminal.integrated.defaultProfile.linux": "bash",
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "terminal.integrated.defaultProfile.osx": "zsh",
    "terminal.integrated.profiles.linux": {
        "bash": {
            "path": "/bin/bash",
            "args": [
                "--init-file",
                "${workspaceFolder}/.vscode/bash_profile.sh"
            ],
            "icon": "terminal-bash"
        },
        "PowerShell": {
            "path": "/usr/bin/pwsh",
            "args": [
                "-NoExit",
                "-File",
                "${workspaceFolder}/.vscode/powershell_profile.ps1"
            ],
            "icon": "terminal-powershell"
        },
        "sh": {
            "path": "/bin/sh",
            "args": [],
            "icon": "terminal"
        }
    },
    "terminal.integrated.profiles.windows": {
        "PowerShell": {
            "source": "PowerShell",
            "icon": "terminal-powershell",
            "args": [
                "-NoExit",
                "-ExecutionPolicy",
                "Bypass",
                "-File",
                "${workspaceFolder}/.vscode/powershell_profile.ps1"
            ]
        },
        "Command Prompt": {
            "path": [
                "${env:windir}\\Sysnative\\cmd.exe",
                "${env:windir}\\System32\\cmd.exe"
            ],
            "args": [],
            "icon": "terminal-cmd"
        },
        "Git Bash": {
            "source": "Git Bash",
            "icon": "terminal-bash"
        }
    },
    "terminal.integrated.profiles.osx": {
        "bash": {
            "path": "bash",
            "args": [
                "--init-file",
                "${workspaceFolder}/.vscode/bash_profile.sh"
            ],
            "icon": "terminal-bash"
        },
        "zsh": {
            "path": "zsh",
            "args": [
                "-l"
            ],
            "icon": "terminal"
        },
        "PowerShell": {
            "path": "/usr/local/bin/pwsh",
            "args": [
                "-NoExit",
                "-File",
                "${workspaceFolder}/.vscode/powershell_profile.ps1"
            ],
            "icon": "terminal-powershell"
        }
    },
    // Shell integration configuration for command detection
    "terminal.integrated.shellIntegration.enabled": true,
    "terminal.integrated.shellIntegration.showWelcome": false,
    "terminal.integrated.shellIntegration.decorationsEnabled": "both",
    "terminal.integrated.enablePersistentSessions": true,
    "terminal.integrated.persistentSessionReviveProcess": "onExitAndWindowClose",
    // Enhanced command detection settings
    "terminal.integrated.shellIntegration.history": 100,
    "terminal.integrated.commandsToSkipShell": [],
    "terminal.integrated.allowMnemonics": true,
    "terminal.integrated.confirmOnExit": "hasChildProcesses",
    // CMake configuration for this workspace
    "cmake.buildDirectory": "${workspaceFolder}/build",
    "cmake.sourceDirectory": "${workspaceFolder}",
    "cmake.generator": "Ninja",
    "cmake.configureOnOpen": false,
    "cmake.configureOnEdit": false,
    "cmake.defaultVariants": {
        "buildType": {
            "default": "Debug",
            "description": "The build type"
        }
    },
    "cmake.ctestDefaultArgs": [
        "--output-on-failure"
    ],
    "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",
    // Workspace performance optimizations
    "files.exclude": {
        "00_reference/CMSIS_docs/**": true,
        "00_reference/ST_Assets/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Projects/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Utilities/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Middlewares/**": true,
        "**/node_modules": true,
        "**/.git": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true,
        "build/**": true,
        "**/*.o": true,
        "**/*.elf": true,
        "**/*.map": true,
        "**/*.lst": true
    },
    "search.exclude": {
        "00_reference/CMSIS_docs/**": true,
        "00_reference/ST_Assets/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Projects/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Utilities/**": true,
        "00_reference/STM32Cube_FW_H7_V1.12.0/Middlewares/**": true,
        "build/**": true,
        "docs/semantic_vector_db/**": true
    },
    "files.watcherExclude": {
        "00_reference/**": true,
        "build/**": true,
        "docs/semantic_vector_db/**": true,
        "**/node_modules/**": true,
        "**/.git/**": true
    },
    // Todo Tree configuration for STM32 project
    "todo-tree.regex.regex": "((//|#|<!--|;|/\\*|^)\\s*($TAGS)|^\\s*- \\[ \\])",
    "todo-tree.general.tags": [
        "TODO",
        "FIXME",
        "BUG",
        "HACK",
        "XXX",
        "NOTE",
        "INFO"
    ],
    "todo-tree.highlights.defaultHighlight": {
        "foreground": "#FFFFFF",
        "background": "#FFA500",
        "icon": "alert",
        "rulerColour": "#FFA500",
        "type": "tag"
    },
    // Code Spell Checker configuration for embedded project
    "cSpell.words": [
        "STM32H753ZI",
        "STM32H753xx",
        "NUCLEO",
        "IHM02A1",
        "L6470",
        "AS5600",
        "HAL",
        "GPIO",
        "SPI",
        "I2C",
        "UART",
        "CAN",
        "FD",
        "DMA",
        "NVIC",
        "RCC",
        "CMSIS",
        "dSPIN",
        "microstepping",
        "stepper",
        "encoder",
        "magnetic",
        "Cortex",
        "OpenOCD",
        "STLink",
        "GDB",
        "SVD",
        "SSOT",
        "watchdog",
        "MCU",
        "PHY",
        "LAN8742",
        "Ethernet",
        "LwIP",
        "FreeRTOS",
        "ITM",
        "SWO",
        // STM32CubeMX and peripheral terms
        "FDCAN",
        "EXTI",
        "LPTIM",
        "LPUART",
        "LTDC",
        "QSPI",
        "SDMMC",
        "SPDIFRX",
        "SWPMI",
        "HRTIM",
        "DFSDM",
        "DFSDMAC",
        "SYSCLK",
        "HCLK",
        "PLLCLK",
        "PLLSOURCE",
        "SYSCLKSOURCE",
        "PLLFRACN",
        "HPRE",
        "PPRE",
        "CPRE",
        "CKPER",
        "DIVM",
        "DIVN",
        "DIVP",
        "DIVQ",
        "DIVR",
        "MEMORYMAP",
        "LQFP",
        "Systick",
        "PRIORITYGROUP",
        "Xplorer",
        "pinconfig",
        "functionlistsort",
        "MSP",
        "BSP",
        // STM32 technical terms
        "DATASIZE",
        "BAUDRATEPRESCALER",
        "FIRSTBIT",
        "TIMODE",
        "CRCCALCULATION",
        "NSSP",
        "INTERDATA",
        "Susp",
        "AUTOSUSP",
        "MOSI",
        "MISO",
        "PULLUP",
        "ANALOGFILTER",
        "CLOCKSOURCE",
        "COUNTERMODE",
        "CLOCKDIVISION",
        "CPHA",
        "CPOL",
        "kbps",
        "Mbps"
    ],
    "cSpell.customDictionaries": {
        "stm32-project-dictionary": {
            "name": "STM32 Project Dictionary",
            "path": "${workspaceFolder}/.vscode/cspell.txt",
            "addWords": true,
            "scope": "workspace"
        }
    },
    "cSpell.ignorePaths": [
        "build/**",
        "00_reference/**",
        "**/*.ioc"
    ],
    "cSpell.enabledFileTypes": {
        "c": true,
        "cpp": true,
        "h": true,
        "hpp": true,
        "cmake": true,
        "markdown": true,
        "yaml": true,
        "json": true
    },
    // Python configuration enhancements (uses pyproject.toml for formatting settings)
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "python.linting.pylintEnabled": true,
    "python.linting.flake8Args": [
        "--config=${workspaceFolder}/.flake8"
    ],
    "python.linting.pylintArgs": [
        "--rcfile=${workspaceFolder}/.pylintrc"
    ],
    "python.formatting.provider": "black",
    // Makefile Tools configuration
    "makefile.extensionOutputFolder": "./.vscode",
    "makefile.configureOnOpen": false,
    // Markdown configuration
    "markdown.extension.toc.updateOnSave": true,
    "markdown.extension.preview.autoShowPreviewToSide": false,
    // CMake path configuration - use STM32CubeCLT CMake on Windows
    "cmake.cmakePath": "cube-cmake",
    "cmake.configureArgs": [
        "-DCMAKE_TOOLCHAIN_FILE=${workspaceFolder}/cmake/arm-none-eabi-gcc.cmake",
        "-DCMAKE_COMMAND=cube-cmake"
    ],
    "chat.agent.maxRequests": 50,
    "github.copilot.selectedCompletionModel": "claude-sonnet-4",
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "<!-- Workspace-specific Copilot instructions for the STM32H753ZI stepper motor project -->\r\n\r\n# Copilot instructions — stm32h753zi repository\r\n\r\nPurpose: give AI coding agents the minimal, immediately useful context to be productive in this repo.\r\n\r\n- Project type: Embedded C firmware for STM32H753ZI (Nucleo-144) controlling stepper motors via X-NUCLEO-IHM02A1 and L6470 drivers; hybrid X-CUBE-SPN2 + selective MCSDK integration.\r\n- Primary paths and domains you should read first:\r\n\r\n  - `src/` — main firmware and drivers (look for `src/spn2/`, `src/drivers/`, `src/hal_abstraction/`).\r\n  - `src/config/` — Single Source of Truth (SSOT) headers: `hardware_config.h`, `motor_config.h`, `comm_config.h`, `safety_config.h`, `workflow_config.h`.\r\n  - `scripts/` — developer tooling: `auto_update_status.py`, `validate_ssot.py`, `stm32_semantic_search.py`, and `run_python.ps1`.\r\n  - `00_reference/` — large read-only vendor docs and examples (do not modify; copy snippets if needed and reference source).\r\n  - `CMakeLists.txt` and `cmake/` — build configuration and host test integration.\r\n\r\n- High-level architecture and intent (read before editing code):\r\n\r\n  - Firmware SSOT (production): `src/config/*` controls hardware pins, motor limits, and safety thresholds. Use these header values; do not hardcode hardware constants in implementation files.\r\n  - Workflow SSOT (dev tooling): `src/config/workflow_config.h` and `scripts/*` control validation depth and developer-mode behaviours; scripts will source or read these to alter verbosity/validation.\r\n  - Hybrid integration: X-CUBE-SPN2 is the core stepper framework under `src/spn2/`; selective MCSDK enhancements live in `src/mcsdk_selective/` and `src/drivers/adaptation/`.\r\n\r\n- Critical developer workflows (copyable examples):\r\n\r\n  - Build (recommended): run the `Build (CMake)` VS Code task or `powershell -NoProfile -ExecutionPolicy Bypass -File scripts\\fix_cmake.ps1` which prepares and builds the project.\r\n  - Quick build (CI/local): `cmake --build build` after configuring via presets or `scripts\\fix_cmake.ps1`.\r\n  - Flashing (Windows): use the `Flash STM32H753ZI` task which calls STM32_Programmer_CLI.exe; example args are in `.vscode/tasks` (search for task named \"Flash STM32H753ZI\").\r\n  - Run host tests: `cd build && ctest` (Run Tests (CTest) task).\r\n  - Validate SSOT: `${workspaceFolder}\\.venv\\Scripts\\python.exe scripts/validate_ssot.py` or use the `Validate SSOT` task.\r\n  - Update STATUS.md (automated): run `scripts/auto_update_status.py` via the `Update STATUS.md` task; CI hooks call this after builds.\r\n\r\n- Project-specific patterns and conventions:\r\n\r\n  - SSOT-first: All hardware and workflow constants must be read from `src/config/*.h`. Look for `_Static_assert` checks used for compile-time validation.\r\n  - No direct use of `00_reference/` in builds: copy snippets to `src/` with attribution instead of including vendor docs directly.\r\n  - Hybrid driver adaptation: prefer using `src/drivers/adaptation/` when bridging SPN2 and MCSDK APIs; avoid changing SPN2 core files unless necessary.\r\n  - Tests and host-tests: host test harnesses live under `host_tests/` and `build_host_tests/`. Unit tests use Unity/GoogleTest; run via CTest.\r\n\r\n- Integration points and external dependencies to be aware of:\r\n\r\n  - ARM GCC toolchain (arm-none-eabi-\\*), OpenOCD, STM32CubeProgrammer CLI — expected in PATH for build/flash tasks.\r\n  - Python dev tooling (.venv) used for scripts in `scripts/` (semantic search, SSOT validation, status updates). Use repository venv at `.venv`.\r\n  - Semantic search DB under `vector_db/` and `docs/semantic_vector_db/` — scripts `stm32_semantic_search.py` provide programmatic access.\r\n\r\n- Useful code examples to cite when making edits:\r\n\r\n  - Example SSOT usage: `src/drivers/...` files include `config/hardware_config.h` and `config/motor_config.h` before setting pins or L6470 parameters.\r\n  - Build hook: `scripts/fix_cmake.ps1` and `CMakeLists.txt` contain build orchestration and `update-status` targets.\r\n  - Status automation: `scripts/auto_update_status.py` demonstrates how STATUS.md is generated and which metadata the project expects.\r\n\r\n- When changing behavior, enforce validation:\r\n\r\n  - Add or update `_Static_assert` in the SSOT headers where applicable.\r\n  - Update `scripts/validate_ssot.py` and `scripts/auto_update_status.py` if new SSOT keys are introduced.\r\n\r\n- Quick guidance for code-generation agents (do this first):\r\n  1. Read `src/config/*` headers. Ensure any new constant is added there and validated.\r\n  2. Search for usages (`grep` or semantic search) before renaming or changing macros.\r\n  3. Run `scripts/validate_ssot.py` and `cmake --build build` locally to catch integration and compile-time errors.\r\n\r\nIf anything above is unclear or you'd like more detail on a specific area (build chain, SSOT fields, or semantic search usage), tell me what to expand and I'll iterate.\r\n\r\n<!-- Use this file to provide workspace-specific custom instructions to Copilot. For more details, visit https://code.visualstudio.com/docs/copilot/copilot-customization#_use-a-githubcopilotinstructionsmd-file -->\r\n\r\n# STM32H753ZI Stepper Motor Control Project - Copilot Instructions\r\n\r\nThis workspace develops firmware for an **STM32H753ZI Nucleo-144** board controlling stepper motors via **X-NUCLEO-IHM02A1** shield with closed-loop feedback using **AS5600 magnetic encoders**.\r\n\r\n## 📋 Current Project Status\r\n\r\n**IMPORTANT**: Always check `STATUS.md` in the root directory for the most current project state, including:\r\n\r\n- Current development phase and active work items\r\n- Recent completions and next priorities\r\n- Build status and key metrics\r\n- Technical context and architecture status\r\n- Quick reference commands and file locations\r\n\r\n**🤖 STATUS.md Automation System (Phase 3 Complete)**: The status file is now automatically updated via Git hooks after every commit, with real-time monitoring capabilities and enhanced VS Code integration. No manual maintenance required for basic status tracking.\r\n\r\n**Automation Features:**\r\n\r\n- ✅ **Git Hooks**: Post-commit STATUS.md updates with intelligent loop prevention\r\n- ✅ **Real-time Monitoring**: Live build/git status with optimized process management (<1s response)\r\n- ✅ **VS Code Tasks**: Enhanced workflow with manual triggers and preview capabilities\r\n- ✅ **Smart Detection**: Merge commit handling, build context analysis, session continuity tracking\r\n- ✅ **Performance Optimization**: Filesystem-first git checking, strict timeouts, graceful fallbacks\r\n\r\n## X-CUBE-SPN2 + MCSDK Hybrid Integration\r\n\r\nThis project uses a **hybrid approach** combining **X-CUBE-SPN2** (stepper-specific) with **X-CUBE-MCSDK 6.4.1** (selective enhancements):\r\n\r\n### Primary Framework: X-CUBE-SPN2\r\n\r\n- **Core Architecture**: X-CUBE-SPN2 stepper motor expansion package\r\n- **Hardware Support**: X-NUCLEO-IHM02A1 shield with dual L6470 drivers\r\n- **Reference Documentation**: `00_reference/x_cube_spn2_markdown_docs` (2.1MB, 197 files)\r\n- **Advantages**: Native stepper support, no algorithm limitations, perfect IHM02A1 integration\r\n\r\n### Enhancement Layer: MCSDK 6.4.1 (Selective)\r\n\r\n- **Advanced Algorithms**: Position control, motion profiling, safety systems\r\n- **Development Tools**: Motor Control Workbench, real-time monitoring\r\n- **Enhanced Features**: Dual sensor support, speed overshoot mitigation\r\n- **Integration**: Selective adoption of MCSDK capabilities within SPN2 framework\r\n\r\n### File Organization\r\n\r\n- **Primary Code**: `src/spn2/` (X-CUBE-SPN2 components)\r\n- **Enhancement Code**: `src/mcsdk_selective/` (selected MCSDK components)\r\n- **Integration Layer**: `src/drivers/adaptation/` (SPN2-MCSDK bridge)\r\n- **CubeMX Project**: `stm32h753zi_spn2_mcsdk.ioc`\r\n\r\n## Consolidated Instruction System\r\n\r\nThis project uses a **streamlined domain-based instruction system** located in `.github/instructions/` with optimized VS Code Copilot scoping:\r\n\r\n### Domain-Based Instructions (6 Core Files)\r\n\r\n- **project-setup.instructions.md**: Workspace setup, build configuration, testing infrastructure, optimization (`**/*.{c,h,md,cmake,txt,json,yml,yaml}`)\r\n- **hardware.instructions.md**: Hardware configuration, GPIO control, memory management, STM32H7 HAL (`src/drivers/**/*.{c,h}`)\r\n- **comms.instructions.md**: Communication protocols, UART/CAN/SPI/I2C interfaces, networking (`src/communication/**/*.{c,h}`)\r\n- **core-software.instructions.md**: Data types, error handling, state management, motor control algorithms (`src/{common,controllers,drivers}/**/*.{c,h}`)\r\n- **safety-rt.instructions.md**: Safety systems, real-time control, timing management, fail-safe mechanisms (`src/{safety,controllers}/**/*.{c,h}`)\r\n- **api-ui.instructions.md**: API design, user interfaces, documentation generation, external integration (`src/{communication,application}/**/*.{c,h}`)\r\n\r\n### Supporting Instructions (7 Files)\r\n\r\n- **ssot-config.instructions.md**: Single Source of Truth configuration management principles\r\n- **status-maintenance.instructions.md**: STATUS.md maintenance rules, format requirements, and context preservation (`STATUS.md`)\r\n- **feature-management.instructions.md**: Feature creation, management, and tracking guidelines (`features/feature_registry.json,scripts/feature_tracker.py,docs/FEATURE_TRACKING_SYSTEM.md`)\r\n- **development-workflow.instructions.md**: **CRITICAL** development workflow ensuring feature tracking and STATUS.md integration for Copilot context (`**/*.{c,h,md,json,py,sh,yml,yaml}`)\r\n- **file-organization.instructions.md**: File structure and asset placement guidelines\r\n- **cmake-build-system.instructions.md**: Build system configuration including ARM firmware and host testing compilation (`**/CMakeLists.txt,**/*.cmake,**/CMakePresets.json,.vscode/cmake-kits.json,**/fix_cmake.sh,**/run_host_tests.sh`)\r\n\r\n### MCSDK Integration Documentation\r\n\r\n- **docs/MCSDK_INTEGRATION_PLAN.md**: Comprehensive X-CUBE-SPN2 + MCSDK 6.4.1 hybrid integration strategy and CubeMX workflow\r\n\r\n**Key Improvements**: Reduced from 19 instruction files to 13 production-focused files (32% reduction) with archived legacy content. Eliminated redundant RTOS instructions (FreeRTOS complete), merged build system guidance, and added critical development workflow instruction for maintainable, production-ready development guidance with systematic feature tracking integration.\r\n\r\n## Critical Design Principles\r\n\r\n### Single Source of Truth (SSOT)\r\n\r\n**CRITICAL**: All configuration must reference centralized SSOT sources:\r\n\r\n- Hardware configurations in `src/config/hardware_config.h`\r\n- Communication parameters in `src/config/comm_config.h`\r\n- Motor settings in `src/config/motor_config.h`\r\n- Safety thresholds in `src/config/safety_config.h`\r\n- Build metadata in `src/config/build_config.h`\r\n\r\n### Safety First\r\n\r\n**CRITICAL**: Always implement fail-safe behavior:\r\n\r\n- Monitor L6470 fault flags continuously\r\n- Implement watchdog timer for fault recovery\r\n- Validate all inputs and sensor readings\r\n- Stop motors immediately on any fault condition\r\n- Use controlled motion profiles to prevent mechanical stress\r\n\r\n## Reference Assets and Documentation System\r\n\r\nThe `00_reference/` directory contains comprehensive ST official documentation:\r\n\r\n- **STM32H7 HAL Documentation**: 86MB, 3,988 markdown files with complete peripheral coverage\r\n- **X-CUBE-SPN2 L6470 Documentation**: 2.1MB stepper driver specific reference with 197 files\r\n- **STM32H7xx Nucleo BSP Documentation**: 824KB, 42 markdown files with board support package functions\r\n- **CMSIS Documentation**: 49MB, 2,268 HTML files (reference only, not converted)\r\n- **STM32H7 HAL drivers and examples**: Complete implementation examples\r\n- **X-NUCLEO-IHM02A1 board support package**: Shield-specific guidance\r\n- **Application examples and datasheets**: Real-world implementation patterns\r\n\r\n**IMPORTANT**: Never modify `00_reference/` files. Copy needed code to appropriate `src/` locations.\r\n\r\n## Semantic Documentation Search System\r\n\r\n**NEW**: Use intelligent semantic search with real AI embeddings for development with **unified STM32H7 + L6470 + Nucleo BSP coverage**:\r\n\r\n```bash\r\n# PRODUCTION SEMANTIC SEARCH (NEW - Preferred)\r\n\r\n# Recommended: Use wrapper script (auto-handles virtual environment)\r\n./scripts/stm32_search.sh concept \"GPIO configuration\" --scope STM32H7\r\n./scripts/stm32_search.sh function \"HAL_GPIO_Init\" --scope STM32H7\r\n./scripts/stm32_search.sh function \"L6470\" --scope L6470\r\n./scripts/stm32_search.sh peripheral \"SPI\" --scope all\r\n./scripts/stm32_search.sh concept \"stepper motor control\" --scope all\r\n\r\n# Validate workspace markdown links\r\npython3 scripts/link_validator.py\r\n\r\n## Reference Assets\r\n\r\nThe `00_reference/` directory contains ST official assets (READ-ONLY):\r\n\r\n- STM32H7 HAL drivers and examples\r\n- X-NUCLEO-IHM02A1 board support package\r\n- L6470 driver libraries and documentation\r\n- Application examples and datasheets\r\n\r\n**IMPORTANT**: Never modify `00_reference/` files. Copy needed code to appropriate `src/` locations.\r\n\r\n## Environment Context\r\n\r\nThis workspace runs with:\r\n\r\n- ARM GCC toolchain, OpenOCD, Doxygen with Graphviz\r\n- Unity/GoogleTest frameworks\r\n- Python tools: CAN, Sphinx, Breathe for docs\r\n- SSOT validation tools: jq, pre-commit hooks\r\n- All development tools for embedded C/C++\r\n\r\n## Reference Material Usage\r\n\r\nWhen referencing `00_reference/` assets:\r\n\r\n- **Copy** needed header files to `src/` with proper attribution\r\n- **Extract** relevant code snippets with modifications for project needs\r\n- **Document** the source of copied/adapted code in SSOT headers\r\n- **Never** directly include from `00_reference/` in build system\r\n\r\nRemember: **Safety first, SSOT always, modular design throughout.**\r\n```\r\n"
        }
    ]
}