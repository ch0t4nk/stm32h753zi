/**
 * @file test_api_stubs.h
 * @brief Stub declarations to make tests compile
 *
 * AUTO-GENERATED by api_audit_tool.py (EDITED for compilation)
 * TODO: Implement these functions properly
 */

#ifndef TEST_API_STUBS_H
#define TEST_API_STUBS_H

#ifdef UNITY_TESTING
// Only include stubs when testing to avoid conflicts

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* ==========================================================================
 */
/* Missing Type Definitions (TODO: Move to proper headers)                  */
/* ==========================================================================
 */

typedef enum {
    EMERGENCY_STOP_ARMED = 0,
    EMERGENCY_STOP_TRIGGERED = 1,
    EMERGENCY_STOP_RESET_PENDING = 2
} EmergencyStopState_t;

typedef struct {
    uint32_t fault_type;
    uint32_t timestamp;
    uint32_t severity;
} FaultInfo_t;

typedef enum {
    FAULT_STATE_NORMAL = 0,
    FAULT_STATE_L6470_FAULT = 1,
    FAULT_STATE_COMMUNICATION_FAULT = 2
} FaultState_t;

typedef struct {
    uint32_t occurrence_count;
    uint32_t last_occurrence;
    uint32_t total_duration;
} FaultStats_t;

typedef uint32_t FaultType_t;

typedef enum {
    SAFETY_STATE_SAFE = 0,
    SAFETY_STATE_EMERGENCY = 1,
    SAFETY_STATE_DEGRADED = 2
} SafetyState_t;

typedef enum {
    SYSTEM_OK = 0,
    ERROR_INVALID_PARAMETER = 1,
    ERROR_MOTOR_INVALID_ID = 2,
    ERROR_ENCODER_INVALID_ID = 3,
    ERROR_SYSTEM_NOT_ENABLED = 4
} SystemError_t;

typedef enum {
    WATCHDOG_ACTIVE = 0,
    WATCHDOG_TIMEOUT = 1,
    WATCHDOG_FAULT = 2
} WatchdogState_t;

typedef struct {
    uint32_t refresh_count;
    uint32_t timeout_count;
} WatchdogStats_t;

/* Missing Enum Values (TODO: Move to proper headers) */
#define EMERGENCY_STOP_CHANNEL_A 0
#define EMERGENCY_STOP_CHANNEL_B 1
#define EMERGENCY_STOP_FAULT 0xFF
#define ERROR_EMERGENCY_STOP_CHANNEL_MISMATCH 0x100
#define FAULT_COMMUNICATION_TIMEOUT 0x01
#define FAULT_ESCALATION_THRESHOLD 5
#define FAULT_LOG_MAX_ENTRIES 100
#define FAULT_RECOVERY_VALIDATION_TIME_MS 5000
#define FAULT_SENSOR_DISCONNECTED 0x02
#define FAULT_L6470_FLAG 0x10
#define MAX_POSITION_DEG 360
#define MAX_SPEED_RPM 3000
#define WATCHDOG_REFRESH_INTERVAL_MS 100
#define WATCHDOG_TIMEOUT_MS 1000
#define WATCHDOG_TIMEOUT_MULTIPLIER 10

/* ==========================================================================
 */
/* Missing Function Declarations (TODO: Implement properly)                 */
/* ==========================================================================
 */

// Emergency Stop Functions
SystemError_t emergency_stop_process(void);
bool emergency_stop_is_active(void);
SystemError_t emergency_stop_get_last_error(void);
SystemError_t emergency_stop_set_channel_state(uint8_t channel, bool state);

// Fault Monitor Functions
SystemError_t fault_monitor_process(void);
FaultState_t fault_monitor_get_state(void);
SystemError_t fault_monitor_inject_fault(FaultType_t fault_type);
SystemError_t fault_monitor_get_active_fault(FaultInfo_t *fault_info);
SystemError_t fault_monitor_clear_fault_condition(FaultType_t fault_type);
SystemError_t fault_monitor_get_fault_statistics(FaultType_t fault_type,
                                                 FaultStats_t *stats);
bool fault_monitor_is_fault_escalated(FaultType_t fault_type);
bool fault_monitor_is_critical_fault(void);
uint32_t fault_monitor_get_fault_count(void);
uint32_t fault_monitor_get_log_count(void);
SystemError_t fault_monitor_get_fault_by_index(uint32_t index,
                                               FaultInfo_t *fault_info);
SystemError_t fault_monitor_get_last_fault(FaultInfo_t *fault_info);

// Watchdog Functions
SystemError_t watchdog_process(void);
WatchdogState_t watchdog_get_state(void);
SystemError_t watchdog_recover(void);
uint32_t watchdog_get_timeout_ms(void);

// Safety System Functions
SystemError_t safety_system_process(void);
SafetyState_t safety_system_get_state(void);
bool safety_system_are_motors_stopped(void);
SystemError_t safety_system_set_degraded_mode(bool enabled);
bool safety_system_is_degraded(void);

#ifdef __cplusplus
}
#endif

#endif // UNITY_TESTING
#endif /* TEST_API_STUBS_H */
