<!-- [MermaidChart: 499e919f-9d7a-4e6e-ae2c-5c88520a55fe] -->

# STM32H753ZI Stepper Motor Control & Semantic Search System Architecture

**Status**: ‚úÖ **PRODUCTION READY** - ARM_CM7 FreeRTOS + AI-Powered Documentation + API  
**Last Updated**: August 12, 2025  
**Current Phase**: Motor Control Complete, Semantic Search Complete, API Documentation Complete

## üéØ **System Overview**

Professional stepper motor control system with integrated AI-powered semantic search capabilities and comprehensive API documentation. Features production-ready ARM_CM7 FreeRTOS architecture (50.5KB firmware) and intelligent documentation search across 252K+ indexed documents using ChromaDB and mxbai-embed-large embeddings, with complete REST API specification.

## üèóÔ∏è **Hardware Architecture**

```mermaid
%%{init: {"flowchart": {"curve": "basis", "htmlLabels": false}} }%%
graph LR
    subgraph "Microcontroller"
        MCU["STM32H753ZI Nucleo-144\nARM Cortex-M7 @ 480MHz\n2MB FLASH, 1MB RAM"]:::mcu
    end

    subgraph "Stepper Motor 1 Control"
        L6470_1["L6470 Driver 1\nStepper Motor Control"]:::motor1
        AS5600_1["AS5600 Encoder 1\nMagnetic Position Sensor"]:::motor1
        MOTOR1["Stepper Motor 1\nClosed-Loop"]:::motor1
    end

    subgraph "Stepper Motor 2 Control"
        L6470_2["L6470 Driver 2\nStepper Motor Control"]:::motor2
        AS5600_2["AS5600 Encoder 2\nMagnetic Position Sensor"]:::motor2
        MOTOR2["Stepper Motor 2\nClosed-Loop"]:::motor2
    end

    subgraph "System Interfaces"
        CAN["CAN Bus\nHigh-Speed\nMotor Cmd/Status"]:::iface
        STLink["ST-Link Virtual UART\nDebug & Telemetry"]:::iface
        SAFETY["Safety Systems\nEmergency Stop"]:::alert
        WATCHDOG["Hardware Watchdog\nHealth Monitor"]:::alert
    end

    %% Connections from MCU
    MCU -- "SPI Daisy Chain" --> L6470_1
    MCU -- "SPI Daisy Chain" --> L6470_2
    MCU -- "I2C1" --> AS5600_1
    MCU -- "I2C2" --> AS5600_2
    MCU -- "CAN-FD" --> CAN
    MCU -- "UART" --> STLink
    MCU -- "GPIO" --> SAFETY
    MCU -- "IWDG/WWDG" --> WATCHDOG

    %% Motor Driver to Motor
    L6470_1 --> MOTOR1
    L6470_2 --> MOTOR2

    %% Encoder to Motor (feedback)
    AS5600_1 -. "Position Feedback" .-> MOTOR1
    AS5600_2 -. "Position Feedback" .-> MOTOR2

    %% Color Classes
    classDef mcu fill:#B6D6F2,stroke:#357ABD,stroke-width:2px;
    classDef motor1 fill:#C6E5B1,stroke:#4F9D2D,stroke-width:2px;
    classDef motor2 fill:#C3F3F1,stroke:#138A9A,stroke-width:2px;
    classDef iface fill:#DAC2FF,stroke:#8E44AD,stroke-width:2px;
    classDef alert fill:#FFD5C2,stroke:#E67E22,stroke-width:2px;

    %% Assign classes
    class MCU mcu;
    class L6470_1,AS5600_1,MOTOR1 motor1;
    class L6470_2,AS5600_2,MOTOR2 motor2;
    class CAN,STLink iface;
    class SAFETY,WATCHDOG alert;
```

## üß± **Software Architecture**

### **Production FreeRTOS Architecture (Phase 1 Complete)**

```mermaid
graph TB
    subgraph "Application Layer"
        APP["Application Logic<br/>Motor Control Algorithms<br/>Safety Systems"]
        TASKS["FreeRTOS Tasks<br/>‚úÖ Infrastructure Ready<br/>üìã Phase 2 Implementation"]
    end

    subgraph "FreeRTOS Kernel (ARM_CM7)"
        SCHED["Scheduler<br/>‚úÖ 1kHz Operational<br/>Cortex-M7 r0p1 Port"]
        QUEUES["Queues & Semaphores<br/>‚úÖ Framework Ready<br/>Inter-Task Communication"]
        TIMERS["Software Timers<br/>‚úÖ Infrastructure Ready<br/>Periodic Operations"]
    end

    subgraph "HAL Abstraction Layer"
        HAL["HAL Abstraction<br/>‚úÖ Platform Independent<br/>Testing Compatible"]
        DRIVERS["Hardware Drivers<br/>‚úÖ L6470 + AS5600<br/>SPI/I2C Interfaces"]
    end

    subgraph "STM32H7 Hardware"
        PERIPH["Peripherals<br/>‚úÖ SPI/I2C/CAN/UART<br/>‚úÖ I2C1 Configured"]
        NVIC["NVIC & Interrupts<br/>‚úÖ FreeRTOS Priorities<br/>Real-Time Response"]
    end

    APP --> TASKS
    TASKS --> SCHED
    SCHED --> HAL
    HAL --> DRIVERS
    DRIVERS --> PERIPH
    PERIPH --> NVIC
```

### **Phase 2 Task Architecture (Implementation Ready)**

```mermaid
graph LR
    subgraph "FreeRTOS Tasks (Priority Levels)"
        SAFETY["Safety Monitor Task<br/>Priority: 4 (Highest)<br/>Period: 2ms<br/>Stack: 1.5KB"]
        MOTOR["Motor Control Task<br/>Priority: 3 (High)<br/>Period: 1ms<br/>Stack: 2KB"]
        CAN_TASK["CAN Communication<br/>Priority: 2 (Medium)<br/>Period: 20ms<br/>Stack: 1KB"]
        UART_TASK["UART Telemetry<br/>Priority: 1 (Low)<br/>Period: 50ms<br/>Stack: 1KB"]
    end

    subgraph "Inter-Task Communication"
        MOTOR_Q["Motor Command Queue<br/>8 entries"]
        CAN_Q["CAN Message Queue<br/>16 entries"]
        UART_Q["UART Message Queue<br/>8 entries"]
        SAFETY_Q["Safety Event Queue<br/>4 entries"]

        SPI_MUTEX["SPI Bus Mutex<br/>L6470 Protection"]
        I2C_MUTEX["I2C Bus Mutex<br/>AS5600 Protection"]
        STATE_MUTEX["Motor State Mutex<br/>Shared Data Protection"]
    end

    SAFETY -->|Emergency Events| SAFETY_Q
    MOTOR -->|Commands| MOTOR_Q
    CAN_TASK -->|Messages| CAN_Q
    UART_TASK -->|Telemetry| UART_Q

    MOTOR -.->|Bus Access| SPI_MUTEX
    MOTOR -.->|Encoder Access| I2C_MUTEX
    SAFETY -.->|State Access| STATE_MUTEX
```

## üìÅ **Code Architecture**

### **Source Code Organization**

```
src/
‚îú‚îÄ‚îÄ config/                     # ‚úÖ SSOT Configuration (Production Ready)
‚îÇ   ‚îú‚îÄ‚îÄ freertos_config_ssot.h  # ‚úÖ 218 lines - FreeRTOS parameters
‚îÇ   ‚îú‚îÄ‚îÄ rtos_resources_config.h # ‚úÖ 241 lines - Resource declarations
‚îÇ   ‚îú‚îÄ‚îÄ hardware_config.h       # ‚úÖ Pin assignments, peripherals
‚îÇ   ‚îú‚îÄ‚îÄ motor_config.h          # ‚úÖ L6470 settings, motion limits
‚îÇ   ‚îú‚îÄ‚îÄ safety_config.h         # ‚úÖ Watchdog, fault thresholds
{
