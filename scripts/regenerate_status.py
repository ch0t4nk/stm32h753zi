#!/usr/bin/env python3
"""
Simple STATUS.md regeneration helper (dry-run safe)
- Scans for instruction guide files under the workspace and concatenates them into build/STATUS.draft.md
- Preserves headings and timestamps if present

Usage:
  python scripts/regenerate_status.py --dry-run
  python scripts/regenerate_status.py --out build/STATUS.draft.md

Don't commit automatically; run git staging manually after review.
"""
import argparse
from pathlib import Path
import sys

ROOT = Path(__file__).resolve().parent.parent
OUT_DEFAULT = ROOT / 'build' / 'STATUS.draft.md'

# Central instruction directory constant (used instead of hardcoded globs)
INSTRUCTION_DIR = ROOT / '.github' / 'instructions'


def gather_files():
    files = []
    # add top-level .instructions if present
    top = ROOT / '.instructions'
    if top.exists():
        files.append(top)
    # gather .github/instructions md files
    gh = INSTRUCTION_DIR
    if gh.exists():
        files.extend(sorted(gh.rglob('*.md')))
    return files


def normalize_text(text: str) -> str:
    # Minimal normalization: trim trailing spaces, ensure single trailing newline
    out_lines = [ln.rstrip() for ln in text.splitlines()]
    return '\n'.join(out_lines).rstrip() + '\n'


def build_status(files):
    parts = []
    parts.append('# STATUS (Regenerated Draft)')
    parts.append('<!-- Generated by scripts/regenerate_status.py - review before commit -->')
    parts.append('')
    for f in files:
        rel = f.relative_to(ROOT)
        parts.append(f'## Source: {rel}')
        parts.append('')
        try:
            text = f.read_text(encoding='utf-8')
        except Exception as e:
            parts.append(f'<!-- Failed to read {rel}: {e} -->')
            continue
        parts.append(normalize_text(text))
        parts.append('')
    return '\n'.join(parts)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--out', '-o', default=str(OUT_DEFAULT))
    parser.add_argument('--dry-run', action='store_true')
    args = parser.parse_args()

    files = gather_files()
    if not files:
        print('No instruction files found. Nothing to do.')
        return 1

    print(f'Found {len(files)} instruction files:')
    for f in files:
        print(' -', f.relative_to(ROOT))

    content = build_status(files)

    if args.dry_run:
        print('\n--- DRY RUN OUTPUT (first 2000 chars) ---\n')
        print(content[:2000])
        print('\n--- END DRY RUN ---')
        return 0

    out_path = Path(args.out)
    out_path.parent.mkdir(parents=True, exist_ok=True)
    out_path.write_text(content, encoding='utf-8')
    print(f'Wrote draft STATUS to {out_path}')
    return 0


if __name__ == '__main__':
    sys.exit(main())
