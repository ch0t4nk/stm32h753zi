#!/usr/bin/env python3
"""
Generate `src/config/workspace_config.h` (partial) from `config/workflow_toolchain.json`.
This generator only updates a small set of toolchain-related macros so
the canonical header may still be maintained by maintainers.

Usage: python scripts/generate_workspace_config.py --input config/workflow_toolchain.json --output src/config/workspace_config.generated.h
"""
import argparse
import json
import os


def expand_vars(s, ctx):
    # Recursively expand ${var} patterns using ctx until stable
    if not isinstance(s, str):
        return s
    prev = None
    out = s
    # Limit iterations to avoid infinite loops
    for _ in range(10):
        prev = out
        for k, v in ctx.items():
            out = out.replace("${%s}" % k, v)
        if out == prev:
            break
    return out


def main():
    p = argparse.ArgumentParser()
    p.add_argument("--input", default="config/workflow_toolchain.json")
    p.add_argument("--output", default="src/config/workspace_config.generated.h")
    args = p.parse_args()

    with open(args.input, "r", encoding="utf-8") as f:
        j = json.load(f)

    # Build context for simple expansion
    # Build context including string values and allow nested expansion
    ctx = {k: str(v) for k, v in j.items() if isinstance(v, str)}
    # Perform an initial pass to expand nested references
    for k in list(ctx.keys()):
        ctx[k] = expand_vars(ctx[k], ctx)

    arm_gcc = ctx.get("arm_gcc_executable", "arm-none-eabi-gcc")
    arm_gpp = ctx.get("arm_gpp_executable", "arm-none-eabi-g++")
    toolchain_file = ctx.get("cmake_toolchain_file", "cmake/gcc-arm-none-eabi.cmake")

    content = []
    content.append("// Generated by scripts/generate_workspace_config.py - do not edit by hand")
    content.append("#ifndef WORKSPACE_CONFIG_GENERATED_H")
    content.append("#define WORKSPACE_CONFIG_GENERATED_H")
    content.append("#define ARM_GCC_PATH \"%s\"" % arm_gcc)
    content.append("#define ARM_GPP_PATH \"%s\"" % arm_gpp)
    content.append("#define CMAKE_TOOLCHAIN_FILE_PATH \"%s\"" % toolchain_file)
    content.append("#endif // WORKSPACE_CONFIG_GENERATED_H")

    os.makedirs(os.path.dirname(args.output), exist_ok=True)
    with open(args.output, "w", encoding="utf-8") as f:
        f.write("\n".join(content) + "\n")

    print("Generated", args.output)


if __name__ == "__main__":
    main()
