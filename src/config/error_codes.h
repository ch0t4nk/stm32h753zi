/*
 * src/config/error_codes.h
 * Canonical Single Source of Truth (SSOT) for error code bases and enums.
 * Generated by automated SSOT migration Batch A.
 */

#ifndef SRC_CONFIG_ERROR_CODES_H
#define SRC_CONFIG_ERROR_CODES_H

#include "config/project_constants.h"
#include <stdbool.h>
#include <stdint.h>

/* ==========================================================================
 * Error code base values (do not duplicate elsewhere)
 * ==========================================================================
 */
#define ERROR_CODE_SUCCESS 0x0000 // Success/OK status
/* Map legacy short bases to SSOT mappings. New code should use
 * SSOT_ERROR_CODE_* where appropriate. These macros maintain legacy
 * numeric ranges for compatibility.
 */
#define ERROR_CODE_BASE SSOT_LEGACY_ERROR_GENERIC_BASE
#define ERROR_CODE_GENERIC_BASE SSOT_LEGACY_ERROR_GENERIC_BASE
#define ERROR_CODE_MOTOR_BASE SSOT_LEGACY_ERROR_MOTOR_BASE
#define ERROR_CODE_ENCODER_BASE SSOT_LEGACY_ERROR_ENCODER_BASE
#define ERROR_CODE_COMM_BASE SSOT_LEGACY_ERROR_COMM_BASE
#define ERROR_CODE_SAFETY_BASE SSOT_LEGACY_ERROR_SAFETY_BASE
#define ERROR_CODE_SYSTEM_BASE SSOT_LEGACY_ERROR_SYSTEM_BASE
#define ERROR_CODE_CONFIG_BASE SSOT_LEGACY_ERROR_CONFIG_BASE
#define ERROR_CODE_TEST_BASE SSOT_LEGACY_ERROR_TEST_BASE

/*
 * Primary System error enum. Keep values stable to avoid ABI changes.
 * Include additional values in this header to remain the canonical source.
 */
typedef enum {
    SYSTEM_OK = ERROR_CODE_SUCCESS,
    SYSTEM_PENDING = ERROR_CODE_SUCCESS + 1,

    /* Generic error codes */
    ERROR_INVALID_PARAMETER = ERROR_CODE_GENERIC_BASE,
    ERROR_NULL_POINTER,
    ERROR_BUFFER_OVERFLOW,
    ERROR_BUFFER_UNDERFLOW,
    ERROR_OUT_OF_RANGE,
    ERROR_NOT_INITIALIZED,
    ERROR_ALREADY_INITIALIZED,
    ERROR_OPERATION_FAILED,
    ERROR_TIMEOUT,
    ERROR_BUSY,
    ERROR_NOT_SUPPORTED,
    ERROR_INVALID_STATE,
    ERROR_RESOURCE_UNAVAILABLE,
    ERROR_CHECKSUM_FAILED,
    ERROR_VERSION_MISMATCH,
    ERROR_INSUFFICIENT_RESOURCES,
    ERROR_MEMORY_ALLOCATION,
    ERROR_RETRY_LIMIT_EXCEEDED,
    ERROR_CONFIGURATION_INVALID,
    /* Timer Error Codes (preserved from legacy header) */
    ERROR_TIMER_INIT_FAILED,
    ERROR_TIMER_START_FAILED,

    /* Short list preserved here for compatibility. Additional ranges
     * (motor, encoder, comm, safety, system) are added below and are
     * canonical in this header. Keep ordering stable.
     */

    /* Motor control error base */
    ERROR_MOTOR_INIT_FAILED = ERROR_CODE_MOTOR_BASE,
    ERROR_MOTOR_CONFIG_INVALID,
    ERROR_MOTOR_SPI_FAILED,
    ERROR_MOTOR_DRIVER_FAULT,
    ERROR_MOTOR_NOT_CONNECTED,
    ERROR_MOTOR_OVERCURRENT,
    ERROR_MOTOR_OVERHEAT,
    ERROR_MOTOR_STALL,
    ERROR_MOTOR_POSITION_ERROR,
    ERROR_MOTOR_SPEED_ERROR,
    ERROR_MOTOR_RUNAWAY,
    ERROR_MOTOR_EMERGENCY_STOP,
    ERROR_MOTOR_LIMIT_REACHED,
    ERROR_MOTOR_HOMING_FAILED,
    ERROR_MOTOR_CALIBRATION_FAILED,
    ERROR_MOTOR_INVALID_COMMAND,
    ERROR_MOTOR_COMMAND_TIMEOUT,
    ERROR_MOTOR_INVALID_SPEED,
    ERROR_MOTOR_INVALID_POSITION,
    ERROR_MOTOR_INVALID_ACCELERATION,
    ERROR_MOTOR_MOVE_ABORTED,
    ERROR_MOTOR_INVALID_ID,
    ERROR_MOTOR_POSITION_LIMIT,
    ERROR_MOTOR_SPEED_LIMIT,
    ERROR_MOTOR_PARAMETER_INVALID,
    ERROR_MOTOR_PARAMETER_OUT_OF_RANGE,
    ERROR_MOTOR_UNDERVOLTAGE,
    ERROR_MOTOR_POSITION_OUT_OF_RANGE,
    ERROR_MOTOR_NOT_ENABLED,
    ERROR_MOTOR_PROFILE_ERROR,
    ERROR_MOTOR_SEQUENCE_ERROR,
    ERROR_MOTOR_COMMUNICATION_FAILED,

    /* Additional motor/operation codes */
    ERROR_OPERATION_IN_PROGRESS,
    ERROR_INVALID_DATA,
    ERROR_SIGNAL_QUALITY_LOW,
    ERROR_PARAMETER_VALIDATION_FAILED,

    /* Encoder / sensor base */
    ERROR_ENCODER_INIT_FAILED = ERROR_CODE_ENCODER_BASE,
    ERROR_ENCODER_I2C_FAILED,
    ERROR_ENCODER_NOT_RESPONDING,
    ERROR_ENCODER_TIMEOUT,
    ERROR_ENCODER_INVALID_ADDRESS,
    ERROR_ENCODER_CONFIG_INVALID,
    ERROR_ENCODER_COMMUNICATION,
    ERROR_ENCODER_DATA_INVALID,
    ERROR_ENCODER_ANGLE_JUMP,
    ERROR_ENCODER_STUCK,
    ERROR_ENCODER_NOISE,
    ERROR_ENCODER_OUT_OF_RANGE,
    ERROR_ENCODER_CORRELATION_FAILED,
    ERROR_ENCODER_CALIBRATION_INVALID,
    ERROR_ENCODER_MAGNET_WEAK,
    ERROR_ENCODER_MAGNET_STRONG,
    ERROR_ENCODER_MAGNET_MISALIGNED,
    ERROR_ENCODER_INVALID_ID,
    ERROR_ENCODER_MAGNET_NOT_DETECTED,
    ERROR_ENCODER_MAGNET_TOO_STRONG,
    ERROR_ENCODER_MAGNET_TOO_WEAK,
    ERROR_ENCODER_FILTER_FAILED,
    ERROR_ENCODER_CONVERSION_FAILED,
    ERROR_ENCODER_ZERO_REFERENCE_LOST,
    ERROR_ENCODER_RESOLUTION_ERROR,
    ERROR_ENCODER_LINEARIZATION_FAILED,

    /* Communication base */
    ERROR_UART_INIT_FAILED = ERROR_CODE_COMM_BASE,
    ERROR_UART_TX_FAILED,
    ERROR_UART_RX_FAILED,
    ERROR_UART_TIMEOUT,
    ERROR_UART_FRAMING_ERROR,
    ERROR_UART_PARITY_ERROR,
    ERROR_UART_OVERRUN,
    ERROR_UART_BUFFER_FULL,
    ERROR_CAN_INIT_FAILED,
    ERROR_CAN_TX_FAILED,
    ERROR_CAN_RX_FAILED,
    ERROR_CAN_BUS_OFF,
    ERROR_CAN_ERROR_PASSIVE,
    ERROR_CAN_ARBITRATION_LOST,
    ERROR_CAN_MESSAGE_LOST,
    ERROR_CAN_INVALID_ID,
    ERROR_CAN_FILTER_FAILED,
    ERROR_CAN_HEARTBEAT_TIMEOUT,
    ERROR_COMM_INIT_FAILED,
    ERROR_ETH_INIT_FAILED,
    ERROR_ETH_LINK_DOWN,
    ERROR_ETH_NO_IP,
    ERROR_ETH_SOCKET_FAILED,
    ERROR_ETH_BIND_FAILED,
    ERROR_ETH_LISTEN_FAILED,
    ERROR_ETH_ACCEPT_FAILED,
    ERROR_ETH_SEND_FAILED,
    ERROR_ETH_RECEIVE_FAILED,
    ERROR_ETH_CONNECTION_LOST,
    ERROR_I2C_INIT_FAILED,
    ERROR_I2C_DEVICE_NOT_FOUND,
    ERROR_I2C_TIMEOUT,
    ERROR_I2C_ARBITRATION_LOST,
    ERROR_I2C_BUS_ERROR,
    ERROR_I2C_NACK_RECEIVED,
    ERROR_I2C_OVERRUN,
    ERROR_SPI_INIT_FAILED,
    ERROR_SPI_TX_FAILED,
    ERROR_SPI_RX_FAILED,
    ERROR_SPI_TIMEOUT,
    ERROR_SPI_MODE_FAULT,
    ERROR_SPI_OVERRUN,
    ERROR_SPI_CRC_ERROR,
    ERROR_SPI_FRAME_ERROR,
    ERROR_SPI_TRANSMISSION_FAILED,
    ERROR_COMM_MESSAGE_TOO_LARGE,
    ERROR_COMM_INVALID_MESSAGE,
    ERROR_COMM_CHECKSUM_FAILED,
    ERROR_COMM_UNSUPPORTED_PROTOCOL,
    ERROR_COMM_UNSUPPORTED_COMMAND,
    ERROR_COMM_DMA_FAILED,

    /* Safety System Error Codes */
    ERROR_SAFETY_SYSTEM_NOT_READY = ERROR_CODE_SAFETY_BASE,
    ERROR_SAFETY_EMERGENCY_STOP,
    ERROR_SAFETY_WATCHDOG_TIMEOUT,
    ERROR_SAFETY_WATCHDOG_WARNING,
    ERROR_SAFETY_WATCHDOG_MISSED,
    ERROR_SAFETY_WATCHDOG_INIT_FAILED,
    ERROR_SAFETY_CRITICAL_FAULT,
    ERROR_SAFETY_SELF_TEST_FAILED,
    ERROR_SAFETY_VIOLATION,
    ERROR_SAFETY_REDUNDANCY_LOST,
    ERROR_SAFETY_SENSOR_FAULT,
    ERROR_SAFETY_ACTUATOR_FAULT,
    ERROR_SAFETY_ESTOP_BUTTON_FAULT,
    ERROR_SAFETY_RELAY_FAULT,
    ERROR_SAFETY_MONITOR_FAULT,
    ERROR_SAFETY_PARAMETER_INVALID,
    ERROR_SAFETY_REACTION_TIME,
    ERROR_SAFETY_INVALID_RESET,
    ERROR_SAFETY_BUTTON_STILL_PRESSED,
    ERROR_SAFETY_RESET_TOO_SOON,
    ERROR_SAFETY_BUTTON_STUCK,
    ERROR_SAFETY_EXCESSIVE_ACTIVATIONS,
    ERROR_SAFETY_LIMIT_VIOLATION,

    /* System / hardware base */
    ERROR_SYSTEM_INIT_FAILED = ERROR_CODE_SYSTEM_BASE,
    ERROR_FAULT_NOT_FOUND,
    ERROR_SYSTEM_RESOURCE_EXHAUSTED,
    ERROR_SYSTEM_CONFIGURATION_CORRUPTED,
    ERROR_SYSTEM_DEPENDENCY_FAILURE,
    ERROR_SYSTEM_STORAGE_FAILURE,
    ERROR_SYSTEM_CLOCK_FAILURE,
    ERROR_SYSTEM_OVER_TEMPERATURE,
    ERROR_SYSTEM_UNDER_VOLTAGE,
    ERROR_SYSTEM_OVER_VOLTAGE,
    ERROR_SYSTEM_MEMORY_ERROR,
    ERROR_SYSTEM_PERIPHERAL_FAILURE,
    ERROR_SYSTEM_RESET_REQUIRED,

    /* System and Hardware Faults (mapped to SSOT_LEGACY_ERROR_CONFIG_BASE) */
    ERROR_SYSTEM_FAULT = SSOT_LEGACY_ERROR_CONFIG_BASE,
    ERROR_HARDWARE_FAULT,
    ERROR_POWER_SUPPLY_FAULT,
    ERROR_TEMPERATURE_FAULT,
    ERROR_THERMAL_THROTTLE,
    ERROR_VOLTAGE_FAULT,
    ERROR_CLOCK_FAULT,
    ERROR_HARDWARE_FAILURE,
    ERROR_UNKNOWN,
    ERROR_GPIO_WRITE_FAILED,
    ERROR_CONFIG_OUT_OF_RANGE,
} SystemError_t;

/* ==========================================================================
 */
/* Error Severity Levels (SSOT)                                              */
/* ==========================================================================
 */

typedef enum {
    ERROR_SEVERITY_INFO = 0,     /* Informational - no action required */
    ERROR_SEVERITY_WARNING = 1,  /* Warning - continue with caution */
    ERROR_SEVERITY_ERROR = 2,    /* Error - operation failed but recoverable */
    ERROR_SEVERITY_CRITICAL = 3, /* Critical - immediate action required */
    ERROR_SEVERITY_FATAL = 4     /* Fatal - system shutdown required */
} ErrorSeverity_t;

/* Error Information Structure (SSOT) */
typedef struct {
    uint32_t error_code;      /* Error code from above enums */
    ErrorSeverity_t severity; /* Error severity level */
    uint32_t timestamp_ms;    /* Timestamp when error occurred */
    const char *description;  /* Human-readable error description */
    const char *file;         /* Source file where error occurred */
    uint32_t line;            /* Line number where error occurred */
    const char *function;     /* Function where error occurred */
    uint32_t context_data[4]; /* Additional context data */
} ErrorInfo_t;

/* Public utility prototypes */
const char *error_code_to_string(uint32_t error_code);
ErrorSeverity_t get_error_severity(uint32_t error_code);
bool is_critical_error(uint32_t error_code);
void log_error(uint32_t error_code, const char *file, uint32_t line,
               const char *function);
void log_error_detailed(uint32_t error_code, const char *description,
                        const char *file, uint32_t line, const char *function);

/* Compatibility aliases for legacy names (do not change values) */
#ifndef ERROR_COMM_INVALID_COMMAND
#define ERROR_COMM_INVALID_COMMAND ERROR_COMM_UNSUPPORTED_COMMAND
#endif

#ifndef ERROR_COMM_SELF_TEST_FAILED
#define ERROR_COMM_SELF_TEST_FAILED ERROR_COMM_DMA_FAILED
#endif

#ifndef ERROR_COMM_BUSY
#define ERROR_COMM_BUSY ERROR_UART_BUFFER_FULL
#endif

#ifndef ERROR_COMM_SEND_FAILED
#define ERROR_COMM_SEND_FAILED ERROR_ETH_SEND_FAILED
#endif

/* Backward-compatible alias: some tests or legacy code reference
 * ERROR_NOT_IMPLEMENTED — map it to ERROR_NOT_SUPPORTED in canonical SSOT.
 */
#ifndef ERROR_NOT_IMPLEMENTED
#define ERROR_NOT_IMPLEMENTED ERROR_NOT_SUPPORTED
#endif

#endif /* SRC_CONFIG_ERROR_CODES_H */
